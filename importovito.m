function [ importedxyz, filename, pathname ] = importovito
%Imports ovito extended .xyz output files that are saved with the following
%format ID type charge x y z.

[filename, pathname] = uigetfile('*.xyz', 'Select an Ovito .xyz file');
            if isequal(filename,0)
                disp('User selected Cancel')
            else
                disp(['User selected ', fullfile(pathname, filename)])
            end
            %             prompt = {'Number of atom types:'};
            %             dlg_title = 'Input';
            %             answer = inputdlg(prompt,dlg_title,[1 40]);
            %             Number_of_types=str2double(answer); clearvars answer
            %Here enter the project path like C:\path\filename.xyz,
            %Alternatively you can comment the above lines and add: filename= 'C:\path\filename.xyz'
            %        namenumber
            %% Import data from text file.
            % Auto-generated by MATLAB on 2017/08/29 15:13:30
            %% Initialize variables.
            delimiter = ' ';
            
            %% Read columns of data as strings:
            % For more information, see the TEXTSCAN documentation.
            formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
            
            %% Open the text file.
            fileID = fopen(fullfile(pathname, filename),'r');
            
            %% Read columns of data according to format string.
            % This call is based on the structure of the file used to generate this
            % code. If an error occurs for a different file, try regenerating the code
            % from the Import Tool.
            dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);
            
            %% Close the text file.
            fclose(fileID);
            
            %% Convert the contents of columns containing numeric strings to numbers.
            % Replace non-numeric strings with NaN.
            raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
            for col=1:length(dataArray)-1
                raw(1:length(dataArray{col}),col) = dataArray{col};
            end
            numericData = NaN(size(dataArray{1},1),size(dataArray,2));
            
            for col=[1,2,3,4,5,6,7,8,9,10,11]
                % Converts strings in the input cell array to numbers. Replaced non-numeric
                % strings with NaN.
                rawData = dataArray{col};
                for row=1:size(rawData, 1);
                    % Create a regular expression to detect and remove non-numeric prefixes and
                    % suffixes.
                    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                    try
                        result = regexp(rawData{row}, regexstr, 'names');
                        numbers = result.numbers;
                        
                        % Detected commas in non-thousand locations.
                        invalidThousandsSeparator = false;
                        if any(numbers==',');
                            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                            if isempty(regexp(thousandsRegExp, ',', 'once'));
                                numbers = NaN;
                                invalidThousandsSeparator = true;
                            end
                        end
                        % Convert numeric strings to numbers.
                        if ~invalidThousandsSeparator;
                            numbers = textscan(strrep(numbers, ',', ''), '%f');
                            numericData(row, col) = numbers{1};
                            raw{row, col} = numbers{1};
                        end
                    catch me
                    end
                end
            end
            
            
            %% Replace non-numeric cells with NaN
            R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
            raw(R) = {NaN}; % Replace non-numeric cells
            
            %% Create output variable
            importedxyz = cell2mat(raw);
            %% Clear temporary variables
            clearvars delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;
end

